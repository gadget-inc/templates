<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Add reviews</title>
    <style>
      * { box-sizing: border-box; }
      
      body { 
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
        margin: 0; 
        padding: 20px; 
        background: #f6f6f7; 
        line-height: 1.5;
      }
      
      .container { 
        max-width: 800px; 
        margin: 0 auto; 
      }

      h1 {
        font-size: 24px;
        color: #202223;
      }
      
      .review-card {
        display: flex;
        background: white; 
        border-radius: 8px; 
        padding: 24px; 
        margin-bottom: 20px; 
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        flex-direction: column;
        gap: 16px;
      }
      
      .review-header { 
        display: flex; 
        justify-content: space-between; 
        align-items: center;
      }
      
      .review-product { 
        display: flex; 
        align-items: center; 
        gap: 16px; 
      }
      
      .review-thumbnail { 
        width: 60px; 
        height: 60px; 
        object-fit: cover; 
        border-radius: 8px; 
        border: 1px solid #e1e3e5; 
      }
      
      .review-title { 
        margin: 0; 
        color: #202223; 
        font-size: 18px; 
        font-weight: 600; 
      }
      
      .review-status { 
        display: flex; 
        align-items: center; 
        gap: 8px; 
        color: #008060; 
      }
      
      .status-icon { 
        font-size: 20px; 
      }
      
      .review-status h3 { 
        margin: 0; 
        font-size: 16px; 
        font-weight: 500; 
      }
      
      .stars-input { 
        display: flex; 
        flex-direction: column;
        gap: 8px; 
      }
      
      .stars-container { 
        display: flex; 
        gap: 4px; 
      }
      
      .star { 
        font-size: 20px; 
        color: #d1d5db; 
        cursor: pointer; 
        transition: color 0.2s; 
      }
      
      .star:hover, .star.active { 
        color: #fbbf24; 
      }
      

      
      .rating-text { 
        font-size: 12px; 
        color: #6d7175; 
        text-align: center;
      }
      
      .review-form { 
        display: flex; 
        flex-direction: column; 
        gap: 12px;
      }
      
      .form-group { 
        position: relative; 
      }
      
      .review-textarea { 
        width: 100%; 
        padding: 12px; 
        border: 1px solid #c9ccd1; 
        border-radius: 6px; 
        font-family: inherit; 
        font-size: 14px; 
        resize: vertical; 
        min-height: 100px; 
      }
      
      .review-textarea:focus { 
        outline: none; 
        border-color: #008060; 
        box-shadow: 0 0 0 3px rgba(0,128,96,0.1); 
      }
      
      .char-count { 
        position: absolute; 
        bottom: 8px; 
        right: 12px; 
        font-size: 12px; 
        color: #6d7175; 
        background: white; 
        padding: 2px 6px; 
      }
      
      .review-actions { 
        display: flex; 
        justify-content: flex-end; 
      }
      
      .btn-primary { 
        background: #008060; 
        color: white; 
        border: none; 
        padding: 12px 24px; 
        border-radius: 6px; 
        cursor: pointer; 
        font-size: 14px; 
        font-weight: 500; 
        transition: background-color 0.2s; 
      }
      
      .btn-primary:hover { 
        background: #006b4f; 
      }
      
      .btn-primary:disabled { 
        background: #c9ccd1; 
        cursor: not-allowed; 
      }
      
            @media (max-width: 600px) {
          .review-header { 
              flex-direction: column; 
              align-items: flex-start; 
              gap: 16px; 
          }
          
          .review-product { 
              flex-direction: row; 
              align-items: center; 
              gap: 12px; 
              width: 100%;
          }
          
          .review-thumbnail { 
              width: 60px; 
              height: 60px; 
              flex-shrink: 0;
          }
          
          .review-title {
              font-size: 16px;
              flex: 1;
          }
          
          .stars-container {
              gap: 2px;
          }
          
          .star {
              font-size: 18px;
          }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>Add your reviews</h1>
      {% for product in products %}
      <div class="review-card">
        <form action="/api/review/create" method="post" class="review-form">
        <div class="review-header">
          <div class="review-product">
            <img 
              src="{{ product.image | default: 'https://cdn.shopify.com/s/files/1/0533/2089/files/placeholder-images-image_large.png?v=1530129081' }}" 
              alt="{{ product.alt | default: 'Product image placeholder' }}" 
              class="review-thumbnail"
            >
            <div>
              <h2 class="review-title">{{ product.title }}</h2>
              {% if product.reviewCreated %}
                <div class="review-status">
                  <span class="status-icon">✅</span>
                  <h3>Review completed!</h3>
                </div>
              {% else %}
                <div class="stars-input">
                  <div class="stars-container" data-product-id="{{ product.id }}">
                    <span class="star" data-rating="1">★</span>
                    <span class="star" data-rating="2">★</span>
                    <span class="star" data-rating="3">★</span>
                    <span class="star" data-rating="4">★</span>
                    <span class="star" data-rating="5">★</span>
                  </div>
                </div>
              {% endif %}
            </div>
          </div>
        </div>

        {% unless product.reviewCreated %}
          <input type="hidden" name="orderId" value="{{ orderId }}">
          <input type="hidden" name="productId" value="{{ product.id }}">
          <input type="hidden" name="lineItemId" value="{{ product.lineItemId }}">
          <input type="hidden" name="rating" value="0" id="rating-{{ product.id }}">

          <div class="form-group">
            <textarea 
              name="content" 
              rows="4" 
              maxlength="500" 
              placeholder="Write your review..." 
              class="review-textarea"
              required
            ></textarea>
            <div class="char-count"><span class="current-count">0</span>/500</div>
          </div>

          <div class="review-actions">
            <button type="submit" class="btn-primary">Submit review</button>
          </div>
        </form>
        {% endunless %}
      </div>
      {% endfor %}
    </div>
    
    <script src="https://product-reviews-public-remix-ssr--devaoc.gadget.app/api/client/web.min.js" defer="defer"></script>

    <script>
      window.addEventListener("DOMContentLoaded", function() {
        window.api = new Gadget({
          endpoint: "/apps/product-reviews/api/graphql",
        })
      })
    </script>

    <script>
      // Star rating functionality
      document.addEventListener("click", function(e) {
        if (e.target.matches(".star")) {
          const starsContainer = e.target.closest(".stars-container");
          const productId = starsContainer.dataset.productId;
          const rating = parseInt(e.target.dataset.rating);
          const ratingInput = document.getElementById("rating-" + productId);
          
          // Update hidden input
          ratingInput.value = rating;
          
          // Update star display
          const stars = starsContainer.querySelectorAll(".star");
          
          stars.forEach((star) => {
            const starRating = parseInt(star.dataset.rating);
            
            if (starRating <= rating) {
              star.classList.add("active");
            } else {
              star.classList.remove("active");
            }
          });
        }
      });

      // Character count for textarea
      document.addEventListener("input", function(e) {
        if (e.target.matches(".review-textarea")) {
          const textarea = e.target;
          const charCount = textarea.parentElement.querySelector(".char-count .current-count");
          charCount.textContent = textarea.value.length;
        }
      });

      // Form submission handling
      document.addEventListener("submit", async function(e) {
        if (e.target.matches(".review-form")) {
          e.preventDefault();
          const form = e.target;
          
          const submitBtn = form.querySelector(".btn-primary");
          const ratingInput = form.querySelector("input[name='rating']");
          const contentInput = form.querySelector("textarea[name='content']");
          const productIdInput = form.querySelector("input[name='productId']");
          const lineItemIdInput = form.querySelector("input[name='lineItemId']");
          const orderIdInput = form.querySelector("input[name='orderId']");
          
          // Basic validation
          if (parseInt(ratingInput.value) === 0) {
            alert("Please select a rating before submitting.");
            return;
          }
          
          if (!contentInput.value.trim()) {
            alert("Please write a review before submitting.");
            return;
          }
          
          // Disable submit button to prevent double submission
          if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.textContent = "Submitting...";
          }

          const review = await window.api.review.create({
            lineItem: {
              _link: lineItemIdInput.value,
            },
            order: {
              _link: orderIdInput.value,
            },
            rating: parseInt(ratingInput.value),
            content: contentInput.value,
            product: {
              _link: productIdInput.value,
            },
            shop: {
              _link: "{{ shop.id }}",
            },
          })

          if (review) {
            // Update the UI to show review completed
            const reviewCard = form.closest('.review-card');
            const reviewHeader = reviewCard.querySelector('.review-header');
            const reviewProduct = reviewHeader.querySelector('.review-product');
            
            // Find the stars input container
            const starsInput = reviewProduct.querySelector('.stars-input');
            
            // Create the completed status element
            const reviewStatus = document.createElement('div');
            reviewStatus.className = 'review-status';
            reviewStatus.innerHTML = `
              <span class="status-icon">✅</span>
              <h3>Review completed!</h3>
            `;
            
            // Replace stars with completed status
            if (starsInput) {
              starsInput.parentNode.replaceChild(reviewStatus, starsInput);
            }
            
            // Transform the form to show completed state
            const formGroup = form.querySelector('.form-group');
            const reviewActions = form.querySelector('.review-actions');
            
            // Replace the textarea with a success message
            if (formGroup) {
              formGroup.innerHTML = `
                <div style="padding: 20px; background: #f0f9ff; border: 1px solid #0ea5e9; border-radius: 6px; text-align: center;">
                  <div style="font-size: 16px; color: #0369a1; margin-bottom: 8px;">Thank you for your review!</div>
                  <div style="font-size: 14px; color: #0c4a6e;">Your review has been submitted successfully.</div>
                </div>
              `;
            }
            
            // Hide the submit button
            if (reviewActions) {
              reviewActions.style.display = 'none';
            }
            
            // Reset form
            form.reset();
            if (submitBtn) {
              submitBtn.disabled = false;
              submitBtn.textContent = 'Submit review';
            }
          }
        }
      });
    </script>
  </body>
</html>